library(tigris)
library(png)
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
library(shiny)
library(choroplethr)
library(choroplethrZip)
library(ggplot2)
library(ggmap)
library(readr)
library(plyr)
library(tmap)
library(sf)
library(leaflet)
library(raster)
library(spData)
library(shinydashboard)
library(shinythemes)
library(leaflet.extras)
library(magrittr)
library(gmapsdistance)
library(plotly)
library(googleway)
library(mapview)
library(shinyBS)
library(shinyjs)
library(htmltools)
library(bsplus)
library(shinyWidgets)
library(shinycssloaders)
library(shinycustomloader)
library(shinyFeedback)
library(geosphere)
register_google(key="AIzaSyC37N09VQDrlBw-myPO42263tqOj_He9xA")
setwd('D:\\CUSTAT\\5243\\fall2019-proj2--sec1-grp4\\app')
data <- read.csv('../output/FINAL.csv')
filming <- read.csv('../output/Final_Filming.csv')
landmark <- read.csv('../output/Final_Landmarks.csv')
libraries <- read.csv('../output/Final_Libraries.csv')
museums <- read.csv('../output/Final_Museums.csv')
restaurant <- read.csv('../output/Final_Restaurant.csv')
final_data <- merge(filming,landmark,all = T)
final_data <- merge(final_data,libraries,all = T)
final_data <- merge(final_data,museums,all = T)
final_data <- merge(final_data,restaurant,all = T)
runApp('C:/Users/Thinkpad/Desktop')
server <- function(input, output) {
#################### Map ####################
output$map1 <- renderLeaflet({
current_loc <- geocode(input$inaddress)
dlat <- final_data$lat
dlon <- final_data$lon
loc <- cbind(dlon,dlat)
loc <- as.matrix(loc)
dist <- distHaversine(loc, current_loc)
data <- final_data[as.logical(match(final_data$type, input$type, nomatch=0)) & dist<input$range*1609.34,]
leaflet(data) %>%
addTiles() %>%
addMarkers(lng = ~current_loc$lon,
lat = ~current_loc$lat,
popup = "You are here") %>%
addCircles(lng = ~current_loc$lon,
lat = ~current_loc$lat,
radius = input$range*1609.34) %>%
setView(-73.968285, 40.785091, zoom=12) %>%
addMarkers(lng = ~lon,
lat = ~lat,
popup = paste(
"Type:", data$type, "<br>",
"Name:", data$name, "<br>",
"Address:", data$address, "<br>"
),
icon=list(iconUrl=paste(input$type,'.png',sep = ""),iconSize=c(18,18)),
clusterOptions = markerClusterOptions()
)
})
output$text1_1 <- renderText({
"Tell us where you are. There are so many great places near you!"
})
#################### List ####################
output$map2 <- renderLeaflet({
land_loc <- geocode(na.omit(as.character(final_data[final_data$name==input$land_list,]$address)))
film_loc <- geocode(na.omit(as.character(final_data[final_data$name==input$film_list,]$address)))
museum_loc <- geocode(na.omit(as.character(final_data[final_data$name==input$museum_list,]$address)))
library_loc <- geocode(na.omit(as.character(final_data[final_data$name==input$library_list,]$address)))
rest_cat <- restaurant[restaurant$categories==input$rest_type,]
rlat <- rest_cat$lat
rlon <- rest_cat$lon
rloc <- cbind(rlon,rlat)
rloc <- as.matrix(rloc)
r_land_dist <- distHaversine(rloc, land_loc)
r_film_dist <- distHaversine(rloc, film_loc)
r_museum_dist <- distHaversine(rloc, museum_loc)
r_library_dist <- distHaversine(rloc, library_loc)
rest_list <- rest_cat[r_land_dist<input$range_list |
r_film_dist<input$range_list |
r_museum_dist<input$range_list |
r_library_dist<input$range_list,]
leaflet() %>%
addTiles() %>%
setView(-73.968285, 40.785091, zoom=12) %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(data = land_loc,#LANDMARK
lng = ~lon,
lat = ~lat,
popup = paste("Landmark: ", input$land_list),
icon=list(iconUrl='Landmarks.png',iconSize=c(18,18))
) %>%
addCircles(data = land_loc,
lng = ~lon,
lat = ~lat,
radius = input$range_list,
popup = paste("Landmark: ", input$land_list),
stroke = FALSE,
color = "green"
) %>% ##
addMarkers(data = film_loc,# FILM
lng = ~lon,
lat = ~lat,
popup = paste("Film: ", input$film_list),
icon=list(iconUrl='Films.png',iconSize=c(18,18))
) %>%
addCircles(data = film_loc,
lng = ~lon,
lat = ~lat,
radius = input$range_list,
popup = paste("Film: ", input$film_list),
stroke = FALSE,
color ="black"
) %>% ##
addMarkers(data = museum_loc,# MUSEUM
lng = ~lon,
lat = ~lat,
popup = paste("Museum: ", input$museum_list),
icon=list(iconUrl='Museums.png',iconSize=c(18,18))
) %>%
addCircles(data = museum_loc,
lng = ~lon,
lat = ~lat,
radius = input$range_list,
popup = paste("Museum: ", input$museum_list),
stroke = FALSE,
color= "brown"
) %>% ##
addMarkers(data = library_loc,# LIBRARY
lng = ~lon,
lat = ~lat,
popup = paste("Library: ", input$library_list),
icon=list(iconUrl='Libraries.png',iconSize=c(18,18))
) %>%
addCircles(data = library_loc,
lng = ~lon,
lat = ~lat,
radius = input$range_list,
popup = paste("Library: ", input$library_list),
stroke = FALSE,
color="red"
) %>% ##
addMarkers(data = rest_list,
lng = ~lon,
lat = ~lat,
popup = paste(
"Name:", rest_list$name, "<br>",
"Category:", rest_list$categories, "<br>",
"Rating / Price level:", rest_list$rating, " / ",
rest_list$price, "<br>",
"Address:", rest_list$address, "<br>",
"Phone #:", rest_list$tel, "<br>"),
icon=list(iconUrl='restaurant_red.png',iconSize=c(18,18))
)
})
#################### Stats ####################
data<-read.csv('../output/FINAL.csv',header = TRUE)
restaurant1<-data[which(data$Type=="restaurant"),][sample(1:3165,400),]
df<-rbind(data[which((data$Type=="film")|(data$Type=="landmarks")|(data$Type=="library")),],restaurant1)
x<-data.frame(df %>%filter((Type=="film")|(Type=="landmarks")|(Type=="library")|(Type=="restaurant"))%>%group_by(Type) %>% summarise(n()))
y<-data.frame(df %>% filter((Borough=="Brooklyn")|(Borough=="Manhattan")|(Borough=="Queens")|(Borough=="The Bronx"))%>%group_by(Type,Borough) %>% summarise(n()))
# plot 1
scatter<-data.frame("X"=c(rep(x[1,2],4),rep(x[2,2],4),rep(x[3,2],3),rep(x[4,2],3)),"Y"=y)
axis1=list(
title = "Entertainment Type",
range = c(100,600),
autorange = FALSE,
rangemode = "normal",
fixedrange = TRUE,
showticklabels = FALSE
)
axis2=list(
title = "The Number of Size"
)
p <- plot_ly(scatter, x = ~X, y = ~Y.n.., text = ~Y.Borough, type = 'scatter', mode = 'markers', size = ~Y.n.., color = ~Y.Borough, colors = 'Paired',
sizes = c(10, 50),
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'The Number of Sites per Borough',
xaxis = axis1,
yaxis = axis2,
showlegend = TRUE)
#plot 2
x1<-data.frame(data %>%filter((Type=="film")|(Type=="landmarks")|(Type=="library")|(Type=="restaurant"))%>%group_by(Type) %>% summarise(n()))
y1<-data.frame(data %>% filter((Borough=="Brooklyn")|(Borough=="Manhattan")|(Borough=="Queens")|(Borough=="The Bronx"))%>%group_by(Type,Borough) %>% summarise(n()))
scatter_new<-data.frame("X"=c(rep(x1[1,2],4),rep(x1[2,2],4),rep(x1[3,2],3),rep(x1[4,2],3)),"Y"=y1)
scatter1<-data.frame(scatter_new,"percent"=round(scatter$Y.n../scatter$X,digit=2))
p2 <- ggplot() +
geom_bar(aes(y = percent, x = Y.Type, fill = Y.Borough),
data = scatter1, stat = "identity")+ labs(x = "entertainment type", title = "The distribution of Sites per Borough")+
theme(plot.title = element_text(hjust = 0.5))
p3 <- ggplotly(p2)
#output$plot2<-renderPlot(p3)
output$Plot1<-renderPlotly({
if (input$basic_info == "plot1"){
p
}
else if  (input$basic_info == "plot2"){
p3
}
})
#################### Directory ####################
output$film_dir <- renderDataTable({
data %>% filter(Type=="film")%>%
select(Name, Year, Director, Address, Borough)
})
output$land_dir <- renderDataTable({
data %>% filter(Type=="landmarks")%>%
select(Name, Year, Address, Borough, Number_of_Complaints,Style,Material,Use)
})
output$lib_dir <- renderDataTable({
data %>% filter(Type=="library")%>%
select(Name, Address, Borough,System)
})
output$museum_dir <- renderDataTable({
data %>% filter(Type=="Museum")%>%
select(Name, Address, Tel,Url)
})
output$res_dir <- renderDataTable({
data %>% filter(Type=="restaurant")%>%
select(Name, Address, Borough,Categories,Phone,Rating,Price,Zip_code)
})
}
ui <- dashboardPage(
dashboardHeader(title = "\"New\" Yorkers"),
dashboardSidebar(
sidebarMenu(
menuItem("Introduction", tabName = "intro", icon = icon("fas fa-info")),
menuItem("Map", tabName = "mapping", icon = icon("map")),
menuItem("List", tabName = "listing", icon = icon("fas fa-list")),
menuItem("Stats", icon = icon("fas fa-chart-bar"), tabName = "stat"),
menuItem("Directory", icon = icon("book"), tabName = "directory")
)
),
dashboardBody(
tabItems(
tabItem(# Introduction
tabName="intro",
div(class = "intro",
tags$head(
# Include our custom CSS
includeCSS("www/intro.css")
),
align="center",
br(),
br(),
br(),
br(),
br(),
h1("A Guidance for New York Travlers",style="color:white;font-family: Times New Roman;font-size: 300%;font-weight: bold;"),
br(),
br(),
h3("Hello \"New\" Yorkers",style="color:white;font-family: Times New Roman;font-size: 200%;font-weight: bold;"),
h3("This app is made to make your New York adventure go as smoothly as possible.",style="color:white;font-family: Times New Roman;font-size: 200%;font-weight: bold;"),
h5("Cho, Sung In",style="color:white;font-family: Times New Roman;font-size: 200%;font-weight: bold;"),
h5("Li, Yanan",style="color:white;font-family: Times New Roman;font-size: 200%;font-weight: bold;"),
h5("Qiang, Runzi",style="color:white;font-family: Times New Roman;font-size: 200%;font-weight: bold;"),
h5("Ye, Xuanhong",style="color:white;font-family: Times New Roman;font-size: 200%;font-weight: bold;")
)
),#tabItem
tabItem(# Map
tabName= "mapping",
fluidRow(
box(leafletOutput("map1")),
box(textInput(h3("Current Location"), inputId = "inaddress")),
box(
checkboxGroupInput(
inputId = "type",
label=h4("Types of Place"),
choices = list("Landmarks"="Landmarks",
"Films"="Films",
"Museums"="Museums",
"Libraries"="Libraries",
"Restaurants"="Restaurants"))
),
box(submitButton("Locate me")),
box(sliderInput(inputId = "range", "Radius Range(mile):",
min=0, max=5, value=1)),
box(h4(textOutput("text1_1")))
)#fluidRow
),#tabItem - map
tabItem( # List of Places and Restaurants
tabName = "listing",
fluidRow(
box(
# list of landmarks
selectizeInput("land_list",
label="List of Landmarks (Green)",
choices=final_data[final_data$type=="Landmarks",]$name,
selected = NULL,
options = list(create = TRUE)),
# list of films
selectizeInput("film_list",
label="List of Films (Black)",
choices=final_data[final_data$type=="Films",]$name,
selected = NULL,
options = list(create = TRUE)),
# list of Museums
selectizeInput("museum_list",
label="List of Museums (Brown)",
choices=final_data[final_data$type=="Museums",]$name,
selected = NULL,
options = list(create = TRUE)),
# list of Library
selectizeInput("library_list",
label="List of Libraries (Red)",
choices=final_data[final_data$type=="Libraries",]$name,
selected = NULL,
options = list(create = TRUE))
),
# Map showing restaurnats near that place
box(leafletOutput("map2",width = "100%", height="300px")),
# Restaurant Type Filter
box(selectInput(inputId = "rest_type",
label= "Restaurnat Categories",
choices = unique(restaurant$categories)),
submitButton("Yummy!")),
# Range Slider
box(sliderInput(inputId = "range_list", "Radius Range(meter):",
min=0, max=500, value=250))
)
), # tabitem - lists
tabItem( # stats
tabName = "stat",
fluidPage(
sidebarLayout(
absolutePanel(NULL, id = "controls", class = "panel panel-default", fixed = TRUE,draggable = TRUE, left = "auto", right = 20,
top = 90, bottom = "auto", width = 250, height = "auto", cursor = "move",
uiOutput("uni_reset", inline = TRUE),
fluidRow(column(12, align = "center", offset = 0,
actionButton("reset_input2", "Reset"),
tags$style(type = "text/css", "#reset_input2 {width:100%}")
)
)
),
mainPanel(
width = 10,
tabsetPanel(type = "tabs",
tabPanel(strong("Basic Infomation"),
radioButtons("basic_info", NULL,choices = c("plot1","plot2"),
inline = TRUE
),
plotlyOutput("Plot1")
)
),
position = "right"
)
)
)
), # tabitem - stat
tabItem( # directory of data
tabName = "directory",
navbarPage("Directory",
tabPanel("Films",
h3("Film Directory"),
dataTableOutput("film_dir")
),
tabPanel("Landmarks",
h3("Landmark Directory"),
dataTableOutput("land_dir")
),
tabPanel("Libraries",
h3("Library Directory"),
dataTableOutput("lib_dir")
),
tabPanel("Museums",
h3("Museum Directory"),
dataTableOutput("museum_dir")
),
tabPanel("Restaurants",
h3("Restaurant Directory"),
dataTableOutput("res_dir"))
)
) # tabitem - directory
)
)
)
shinyApp(ui,server)
setwd('D:\\CUSTAT\\5243\\fall2019-proj2--sec1-grp4\\app')
shinyApp(ui,server)
library(tigris)
library(png)
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
library(shiny)
library(choroplethr)
library(choroplethrZip)
library(ggplot2)
library(ggmap)
library(readr)
library(plyr)
library(tmap)
library(sf)
library(leaflet)
library(raster)
library(spData)
library(shinydashboard)
library(shinythemes)
library(leaflet.extras)
library(magrittr)
library(gmapsdistance)
library(plotly)
library(googleway)
library(mapview)
library(shinyBS)
library(shinyjs)
library(htmltools)
library(bsplus)
library(shinyWidgets)
library(shinycssloaders)
library(shinycustomloader)
library(shinyFeedback)
library(geosphere)
register_google(key="AIzaSyC37N09VQDrlBw-myPO42263tqOj_He9xA")
setwd('D:\\CUSTAT\\5243\\fall2019-proj2--sec1-grp4\\app')
data <- read.csv('../output/FINAL.csv')
filming <- read.csv('../output/Final_Filming.csv')
landmark <- read.csv('../output/Final_Landmarks.csv')
libraries <- read.csv('../output/Final_Libraries.csv')
museums <- read.csv('../output/Final_Museums.csv')
restaurant <- read.csv('../output/Final_Restaurant.csv')
final_data <- merge(filming,landmark,all = T)
final_data <- merge(final_data,libraries,all = T)
final_data <- merge(final_data,museums,all = T)
final_data <- merge(final_data,restaurant,all = T)
runApp()
